{"version":3,"sources":["index.js"],"names":["App","state","markers","usersPositionObtained","toiletsFound","window","navigator","geolocation","getCurrentPosition","position","console","log","coords","latitude","longitude","setState","push","axios","post","lat","long","then","response","data","length","forEach","item","toilet_coordinate","loc","coordinates","catch","error","marker","leafletElement","setTimeout","openPopup","idx","key","ref","this","news","toiletStatus","className","center","zoom","style","width","height","margin","url","attribution","map","userLocationObtainer","Component","ReactDOM","render","document","getElementById"],"mappings":"6RAKMA,E,2MACJC,MAAQ,CAINC,QAAS,GACTC,sBAAuB,KACvBC,aAAc,M,mFAGK,IAAD,OAClBC,OAAOC,UAAUC,YAAYC,oBAAmB,SAAAC,GAC9CC,QAAQC,IACN,8BACEF,EAASG,OAAOC,SAChB,KACAJ,EAASG,OAAOE,WAGpB,EAAKC,SAAS,CAAEZ,sBAAuB,QARmB,IAWlDD,EAAY,EAAKD,MAAjBC,QACRA,EAAQc,KAAK,CAACP,EAASG,OAAOC,SAAUJ,EAASG,OAAOE,YACxD,EAAKC,SAAS,CAAEb,YAEhBe,IACGC,KAAK,kDAAmD,CACvDC,IAAKV,EAASG,OAAOC,SACrBO,KAAMX,EAASG,OAAOE,YAEvBO,MAAK,SAAAC,GAG4B,qBAAvBA,EAASC,KAAKA,MACrBD,EAASC,KAAKA,KAAKC,OAAS,IAE5B,EAAKT,SAAS,CAAEX,aAAc,QAChBkB,EAASC,KAAKA,KAEpBE,SAAQ,SAAAC,GACd,IAAIC,EAAoBD,EAAKE,IAE7B1B,EAAQc,KAAK,CACXW,EAAkBE,YAAY,GAC9BF,EAAkBE,YAAY,KAEhC,EAAKd,SAAS,CAAEb,YAEhBQ,QAAQC,IACN,uCACEgB,EAAkBE,YAAY,GAC9B,sBACAF,EAAkBE,YAAY,WAKvCC,OAAM,SAASC,GACdrB,QAAQC,IAAIoB,W,gCAKVC,GACJA,GAAUA,EAAOC,gBACnB5B,OAAO6B,YAAW,WAChBF,EAAOC,eAAeE,iB,2CAKPC,EAAK3B,GAExB,OAAY,IAAR2B,EAEA,kBAAC,IAAD,CAAQC,IAAG,iBAAYD,GAAO3B,SAAUA,EAAU6B,IAAKC,KAAKJ,WAC1D,kBAAC,IAAD,KACE,kDAKC,kBAAC,IAAD,CAAQE,IAAG,iBAAYD,GAAO3B,SAAUA,M,+BAIzC,IAEJ+B,EAFG,OACDC,EAAeF,KAAKtC,MAAMG,aAqBhC,MAlBqB,OAAjBqC,GAA8D,QAArCF,KAAKtC,MAAME,sBACtCqC,EACE,yIAGE,2BACE,6BADF,iGAOsB,QAAjBC,IACTD,EACE,iGAKF,yBAAKE,UAAU,OACb,gEACA,oGAGA,uDAA6BH,KAAKtC,MAAME,sBAAxC,KACCqC,EAED,kBAAC,IAAD,CACEG,OAAQ,EAAE,aAAc,eACxBC,KAAM,GACNC,MAAO,CAAEC,MAAO,MAAOC,OAAQ,OAAQC,OAAQ,SAE/C,kBAAC,IAAD,CACEC,IAAI,+EACJC,YAAY,oIAEbX,KAAKtC,MAAMC,QAAQiD,KAAI,SAAC1C,EAAU2B,GAAX,OACtB,EAAKgB,qBAAqBhB,EAAK3B,Y,GAhIzB4C,aAwIlBC,IAASC,OAAO,kBAACvD,EAAD,MAASwD,SAASC,eAAe,W","file":"static/js/main.c0dbf4b2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport axios from \"axios\";\nimport { Map, TileLayer, Marker, Popup } from \"react-leaflet\";\n\nclass App extends Component {\n  state = {\n    // 15 Queens Rd\n    //   lat: -37.8390583,\n    //   lng: 144.97499729999998\n    markers: [],\n    usersPositionObtained: \"NO\",\n    toiletsFound: \"NO\"\n  };\n\n  componentDidMount() {\n    window.navigator.geolocation.getCurrentPosition(position => {\n      console.log(\n        \"Current user's location is \" +\n          position.coords.latitude +\n          \", \" +\n          position.coords.longitude\n      );\n\n      this.setState({ usersPositionObtained: \"YES\" });\n\n      // add to the markers ; i think there's a better way to do this (spread operator ?)\n      const { markers } = this.state;\n      markers.push([position.coords.latitude, position.coords.longitude]);\n      this.setState({ markers });\n\n      axios\n        .post(\"https://www.jacintomendes.com:8443/api/toilets/\", {\n          lat: position.coords.latitude,\n          long: position.coords.longitude\n        })\n        .then(response => {\n          //   console.log(response);\n          if (\n            typeof response.data.data !== \"undefined\" &&\n            response.data.data.length > 0\n          ) {\n            this.setState({ toiletsFound: \"YES\" });\n            let toilets = response.data.data;\n\n            toilets.forEach(item => {\n              let toilet_coordinate = item.loc;\n\n              markers.push([\n                toilet_coordinate.coordinates[1],\n                toilet_coordinate.coordinates[0]\n              ]);\n              this.setState({ markers });\n\n              console.log(\n                \"FROM POST REQUEST: coordinates lat: \" +\n                  toilet_coordinate.coordinates[1] +\n                  \" coordinates long: \" +\n                  toilet_coordinate.coordinates[0]\n              );\n            });\n          }\n        })\n        .catch(function(error) {\n          console.log(error);\n        });\n    });\n  }\n\n  openPopup(marker) {\n    if (marker && marker.leafletElement) {\n      window.setTimeout(() => {\n        marker.leafletElement.openPopup();\n      });\n    }\n  }\n\n  userLocationObtainer(idx, position) {\n    // open the marker popup only for first marker!\n    if (idx === 0) {\n      return (\n        <Marker key={`marker-${idx}`} position={position} ref={this.openPopup}>\n          <Popup>\n            <span>You are Here !</span>\n          </Popup>\n        </Marker>\n      );\n    } else {\n      return <Marker key={`marker-${idx}`} position={position}></Marker>;\n    }\n  }\n\n  render() {\n    const toiletStatus = this.state.toiletsFound;\n    let news;\n\n    if (toiletStatus === \"NO\" && this.state.usersPositionObtained === \"YES\") {\n      news = (\n        <p>\n          Sadly, there were no toilets found, this is likely if you are trying\n          this app outside of the Melbourne CBD.\n          <i>\n            <br></br>\n            For developers, and those interested, try overriding the GPS sensor\n            to -37.818078, 144.96681\n          </i>\n        </p>\n      );\n    } else if (toiletStatus === \"YES\") {\n      news = (\n        <p>Good Heavens! Toilets were found, get busy sh*tting or die tryin'</p>\n      );\n    }\n\n    return (\n      <div className=\"map\">\n        <h1> Melbourne Public Toilet Finder </h1>\n        <p>\n          Note - this webapp works only within the city, because of the dataset\n        </p>\n        <p> User Position Obtained: {this.state.usersPositionObtained} </p>\n        {news}\n\n        <Map\n          center={[-37.808163434, 144.957829502]}\n          zoom={16}\n          style={{ width: \"80%\", height: \"40em\", margin: \"auto\" }}\n        >\n          <TileLayer\n            url=\"https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png\"\n            attribution='&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>, &copy; <a href=\"https://carto.com/attribution\">CARTO</a>'\n          />\n          {this.state.markers.map((position, idx) =>\n            this.userLocationObtainer(idx, position)\n          )}\n        </Map>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}